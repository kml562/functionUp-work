GET Request ->


If we have an endpoint like this -> 

url - http://localhost:8080/api/v1/user/insta


!GET

In frontend (GET) ->
To make get request we only need to use anything like axios or fetch
const data = await axios.get(url) -> keep it in async function

In backend (GET) ->

router.get('/', getData);

const getData = async(req,res)=>{
    res.status(200).json(JSON_DATA_WE_WANT_TO_SHARE)
}




!POST 

In frontend (POST) ->
To make post request we only need to use anything like axios or fetch

const data = await axios.post(url, body) -> keep it in async function
const data = await axios.post(http://localhost:8080/api/v1/user/sendData, {
    body : data_we_want_to_send
}) 

In backend (POST) ->
router.post('/', handleData);

const handleData = async(req,res)=>{
    const {data} = req.body
    res.status(200).json(data)
}



!PUT

In frontend (PUT) ->
To make a PUT request, you can use the axios.put() method or the fetch() method with the 'PUT' option.

const data = await axios.put(url, body) -> keep it in async function
const data = await axios.put(http://localhost:8080/api/v1/user/updateData, {
body : updated_data
})

In backend (PUT) ->
router.put('/', handleUpdate);

const handleUpdate = async(req,res)=>{
const {data} = req.body
// update the data in the database
res.status(200).json(data)
}

!DELETE

In frontend (DELETE) ->
To make a DELETE request, you can use the axios.delete() method or the fetch() method with the 'DELETE' option.

const data = await axios.delete(url) -> keep it in async function
const data = await axios.delete(http://localhost:8080/api/v1/user/deleteData)

In backend (DELETE) ->
router.delete('/', handleDelete);

const handleDelete = async(req,res)=>{
const {data} = req.body
// delete the data from the database
res.status(200).json(data)
}

Note: In the above examples, 'url' is the endpoint you want to hit, 'body' is the data you want to send, and 'handleData', 'handleUpdate', 'handleDelete' are the handlers for the request